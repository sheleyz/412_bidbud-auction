var express = require('express');
var router = express.Router();

// Import the Node.js library
const { Firestore } = require('@google-cloud/firestore');

// Get an instance of Firestore
const firestore = new Firestore();

// Middleware to report authentication status
const ensureAuthenticated = (req, res, next) => {
    if (req.isAuthenticated()) {
        // authenticated
        next();
    } else {
        res.sendStatus(401);
    }
}

/* GET listing of all auction items. */
router.get('/', async (req, res, next) => {
    // Get a snapshot that represents all auction items
    // Ordering and Limiting Data: https://cloud.google.com/firestore/docs/query-data/order-limit-data#node.js
    const auctionItemsSnapshot = await firestore.collection('auction_items').orderBy('current_bid').get();

    // Make a local array of auction items
    auctionItems = [];
    auctionItemsSnapshot.forEach(item => {
        // console.log(`Artist name: ${item.data().artist} - Item title: ${item.data().title}`);

        // Create a local auction item object
        auctionItem = item.data();
        auctionItem.id = item.id;
        auctionItem.image = `https://storage.googleapis.com/sp22-final-image-bucket/${item.id}.jpeg`;
        auctionItems.push(auctionItem);
    });

    res.render('index', { title: "BidBud", itemlist: auctionItems });
});

/* GET view of a single auction item. */
router.get('/view', async (req, res, next) => {
    // Get a snapshot that represents a single auction item
    const auctionItemSnapshot = await firestore.collection('auction_items').doc(req.query.id).get();
    const itemBidSnapshot = await firestore.collection('auction_items').doc(req.query.id).collection('bids').orderBy('amount', 'desc').limit(1).get();

    // console.log(`Auction Item ID: ${auctionItemSnapshot.id}`);
    // console.log(`Auction Item title: ${auctionItemSnapshot.data().title}`);

    // Make a local array of auction item bids
    itemBids = [];
    itemBidSnapshot.forEach(bid => {
        // console.log(`Bidder Email: ${bid.data().email} - Current Bid: ${bid.data().current_bid}`);

        // Create a local auction item bid object
        itemBid = bid.data();
        itemBids.push(itemBid);
    });

    let auctionItemImage = `https://storage.googleapis.com/sp22-final-image-bucket/${auctionItemSnapshot.id}.jpeg`;

    let nextBid;
    try {
        nextBid = Number(itemBids[0].amount) + 10;
    } catch (error) {
        nextBid = 10;
    }

    // bidlist: itemBids
    res.render('view', { itemid: auctionItemSnapshot.id, artist: auctionItemSnapshot.data().artist, title: auctionItemSnapshot.data().title, medium: auctionItemSnapshot.data().medium, size: auctionItemSnapshot.data().size, description: auctionItemSnapshot.data().description, aboutartist: auctionItemSnapshot.data().about_artist, currentbid: auctionItemSnapshot.data().current_bid, image: auctionItemImage, nextBid: nextBid });
});

/* POST to make a new bid */
router.post('/makebid', ensureAuthenticated, async (req, res, next) => {
    // Logic to make a new bid.
    // Adding data to Firestore: https://firebase.google.com/docs/firestore/manage-data/add-data#node.js
    console.log('Creating a new bid.');
    const myBid = {
        itemID: req.body.itemID,
        email: req.user.email,
        amount: Number(req.body.newBid)
    };

    // Firestore document with autogenerated id: https://cloud.google.com/firestore/docs/samples/firestore-data-set-id-random-collection
    await firestore.collection('auction_items').doc(req.body.itemID).collection('bids').add(myBid);
    console.log('Added bid to Firestore - auction_items.');

    await firestore.collection('users').doc(req.user.email).collection('bids').add(myBid);
    console.log('Added bid to Firestore - users.');

    await firestore.collection('auction_items').doc(req.body.itemID).update({ current_bid: myBid.amount });
    console.log('Updated current_bid for auction item.');
    res.render('submitted', { title: "Bid Submitted Successfully", itemlist: auctionItems });
});

module.exports = router;
